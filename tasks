#!/usr/bin/fish

# cmd is the command just followed by tasks, 
# something like tasks clean, here cmd will be set as "clean"
set -x cmd $argv[1]

# tasks directory
set -x tasksDir "$HOME/.local/lib/tasks"

# sourcing all the function from src
source $tasksDir/src/add_.fish
source $tasksDir/src/addAt_.fish
source $tasksDir/src/rm_.fish
source $tasksDir/src/done_.fish
source $tasksDir/meta/env

# switch case to determine the command
switch $cmd

    # empty case, it shows the to-do list``
    case ''
        echo "list:" $list 
        cat -n $tasksDir/lists/"$list"/Tdo.txt

    # this requires improvements, it opens the readme
    case "--help" "-h" "help"
        man tasks
    
    # return version 
    case "-v" "--version"
        echo "v3.0"

    # used to create a new list
    case mklist
        if test -n $argv[2]
            set dir $tasksDir/lists/"$argv[2..-1]"
            [ -d "$dir" ] && echo "list already exists" && exit
            mkdir "$dir"
            touch "$dir"/Tdo.txt
            touch "$dir"/Tdone.txt
            echo set list "$argv[2..-1]" > $tasksDir/meta/env
            echo Using "$argv[2..-1]"
        else 
            # if the command is tasks create , then it will
            # return this error message
            echo "tasks create ... what?"
        end

    # to remove a list
    case rmlist
        if test -n $argv[2]
            if [ "$argv[2..-1]" = "base" ]
                echo cannot tear base list
                exit
            end
            set dir $tasksDir/lists/"$argv[2..-1]"
            [ ! -d "$dir" ] && echo "list doesn't exist" && exit
            rm -r "$dir"
            echo set list base > $tasksDir/meta/env
        else 
            echo "tasks tear ... what?"
        end

    # this will show all the lists
    case ls
        set thelists (ls $tasksDir/lists/)
        for i in $thelists
            if [ "$list" = $i ]
                echo -n "*"
            end
            echo $i
        end

    # to switch to a list
    case cl
        if test -n $argv[2]
            set dir $tasksDir/lists/"$argv[2..-1]"
            # echo $dir
            [ ! -d "$dir" ] && echo "No such lists exists" && exit
            echo set list "$argv[2..-1]" > $tasksDir/meta/env
            echo Using "$argv[2..-1]"
        else
            echo "tasks use ... what?"
        end

    # to add a new task to the list
    case add
        add_ $argv --list="$list"    

    # this is a replacement for priority
    # if a task is more important, it can be added on top
    case addAt
        addAt_ $argv --list="$list"

    # to delete or remove a task
    # this command is used to discard a task
    case rm
        if test -z $argv[2]
            echo "tasks $argv[1] .. what?"
            exit
        end
        if [ $argv[2] = "." ]
           # same as cleanDo
            cat /dev/null > $tasksDir/lists/"$list"/Tdo.txt
            cat /dev/null > $tasksDir/lists/"$list"/Tdone.txt
            exit
        end
        rm_ $argv --list="$list"

    # mark a task as done, it will move the task to done list
    case "done" 
        if test -z $argv[2]
            echo "tasks done .. what?"
            exit
        end
        done_ $argv --list="$list"

    # lists all the done tasks
    case show
        echo "list:" $list
        echo "To-do"
        cat -n $tasksDir/lists/"$list"/Tdo.txt
        echo "marked as done"
        cat -n $tasksDir/lists/"$list"/Tdone.txt
    
    # opens the to-do list in vi
    case vi
        vi $tasksDir/lists/"$list"/Tdo.txt
        
    # opens the to-do list in default text editor
    case xdg
        xdg-open $tasksDir/lists/"$list"/Tdo.txt

    # unrecognized command
    case '*'
        echo $argv, This is not a recognized command
        echo "Use tasks help to see usage of commands or refer the man page"

end
  
